---
// Simple Lead Capture Component - Clean & Reliable
// Just 3 fields: Name, Email, Phone

export interface Props {
  title?: string;
  buttonText?: string;
  className?: string;
}

const {
  title = "Get Your Free Consultation",
  buttonText = "Get Started",
  className = ""
} = Astro.props;
---

<div class={`simple-lead-form ${className}`}>
  <!-- Form Header -->
  <div class="text-center mb-6">
    <h2 class="text-2xl font-bold text-white mb-3">{title}</h2>
    <p class="text-gray-300">
      Name, Email, Phone - That's it!
    </p>
  </div>

  <!-- Simple Form -->
  <form id="simple-lead-form" class="space-y-4">
    <!-- Name -->
    <div>
      <label for="name" class="block text-sm font-medium text-gray-300 mb-2">
        Full Name *
      </label>
      <input
        type="text"
        id="name"
        name="name"
        required
        class="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-yellow-400 focus:ring-2 focus:ring-yellow-400/20 transition-all"
        placeholder="John Smith"
      />
      <div id="name-error" class="text-red-400 text-sm mt-1 hidden"></div>
    </div>

    <!-- Email -->
    <div>
      <label for="email" class="block text-sm font-medium text-gray-300 mb-2">
        Email Address *
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-yellow-400 focus:ring-2 focus:ring-yellow-400/20 transition-all"
        placeholder="john@company.com"
      />
      <div id="email-error" class="text-red-400 text-sm mt-1 hidden"></div>
    </div>

    <!-- Phone -->
    <div>
      <label for="phone" class="block text-sm font-medium text-gray-300 mb-2">
        Phone Number *
      </label>
      <input
        type="tel"
        id="phone"
        name="phone"
        required
        class="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-yellow-400 focus:ring-2 focus:ring-yellow-400/20 transition-all"
        placeholder="(555) 123-4567"
      />
      <div id="phone-error" class="text-red-400 text-sm mt-1 hidden"></div>
    </div>

    <!-- Submit Button -->
    <button
      type="submit"
      id="submit-btn"
      class="w-full bg-yellow-400 hover:bg-yellow-300 text-black font-bold py-4 px-6 rounded-lg transition-all duration-300 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <span id="submit-text">{buttonText}</span>
      <span id="submit-loading" class="hidden">Sending...</span>
    </button>

    <!-- Trust Signals -->
    <div class="text-center pt-2">
      <p class="text-xs text-gray-400">
        ✓ Free consultation ✓ No spam ✓ Quick response
      </p>
    </div>
  </form>

  <!-- Success Message -->
  <div id="success-message" class="hidden text-center p-6 bg-green-500/10 border border-green-500/30 rounded-lg">
    <div class="text-green-400 text-xl mb-2">✓ Thank You!</div>
    <p class="text-white text-sm">
      We received your information and will contact you within 24 hours.
    </p>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('simple-lead-form');
    const submitBtn = document.getElementById('submit-btn');
    const submitText = document.getElementById('submit-text');
    const submitLoading = document.getElementById('submit-loading');
    const successMessage = document.getElementById('success-message');

    if (form && submitBtn) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Get form data
        const formData = new FormData(form);
        const name = formData.get('name')?.toString()?.trim();
        const email = formData.get('email')?.toString()?.trim();
        const phone = formData.get('phone')?.toString()?.trim();

        // Clear previous errors
        clearErrors();

        // Validate
        let hasErrors = false;
        if (!name) {
          showError('name', 'Name is required');
          hasErrors = true;
        }
        if (!email) {
          showError('email', 'Email is required');
          hasErrors = true;
        } else if (!isValidEmail(email)) {
          showError('email', 'Please enter a valid email');
          hasErrors = true;
        }
        if (!phone) {
          showError('phone', 'Phone is required');
          hasErrors = true;
        }

        if (hasErrors) return;

        // Show loading
        submitBtn.disabled = true;
        submitText.classList.add('hidden');
        submitLoading.classList.remove('hidden');

        try {
          const response = await fetch('/api/simple-lead', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name, email, phone })
          });

          if (response.ok) {
            // Show success
            form.classList.add('hidden');
            successMessage.classList.remove('hidden');
            window.dispatchEvent(new CustomEvent('form_submit_success'));
          } else {
            window.dispatchEvent(new CustomEvent('form_submit_error'));
            throw new Error('Failed to submit');
          }
        } catch (error) {
          console.error('Error:', error);
          window.dispatchEvent(new CustomEvent('form_submit_error'));
          alert('There was an error. Please try again or call (469) 534-3392');
        } finally {
          // Reset button
          submitBtn.disabled = false;
          submitText.classList.remove('hidden');
          submitLoading.classList.add('hidden');
        }
      });
    }

    function showError(field, message) {
      const errorDiv = document.getElementById(`${field}-error`);
      const input = document.getElementById(field);
      if (errorDiv && input) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
        input.classList.add('border-red-500');
      }
    }

    function clearErrors() {
      ['name', 'email', 'phone'].forEach(field => {
        const errorDiv = document.getElementById(`${field}-error`);
        const input = document.getElementById(field);
        if (errorDiv) errorDiv.classList.add('hidden');
        if (input) input.classList.remove('border-red-500');
      });
    }

    function isValidEmail(email) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }
  });
</script>

<style>
  .simple-lead-form input:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 193, 7, 0.15);
  }

  .simple-lead-form button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);
  }

  .border-red-500 {
    border-color: #ef4444 !important;
  }
</style>
