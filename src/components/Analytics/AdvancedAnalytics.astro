---
interface AnalyticsEvent {
  event: string;
  category: string;
  action: string;
  label?: string;
  value?: number;
  customParameters?: Record<string, any>;
}

interface Props {
  gtmId?: string;
  gtagId?: string;
  enableDebug?: boolean;
  enableCookieConsent?: boolean;
  enablePerformanceTracking?: boolean;
  enableUserBehaviorTracking?: boolean;
  enableConversionTracking?: boolean;
  customEvents?: AnalyticsEvent[];
}

const {
  gtmId = 'GTM-XXXXXXX',
  gtagId = 'G-XXXXXXXXXX',
  enableDebug = false,
  enableCookieConsent = true,
  enablePerformanceTracking = true,
  enableUserBehaviorTracking = true,
  enableConversionTracking = true,
  customEvents = []
} = Astro.props;

// Generate analytics configuration
const analyticsConfig = {
  page_title: Astro.url.pathname,
  page_location: Astro.url.href,
  content_group1: 'Business Services',
  content_group2: 'Local SEO',
  custom_map: {
    dimension1: 'user_type',
    dimension2: 'page_category',
    dimension3: 'service_interest',
    dimension4: 'location_preference',
    dimension5: 'conversion_funnel_stage'
  }
};

// Core Web Vitals thresholds
const webVitalsThresholds = {
  LCP: { good: 2500, poor: 4000 },
  FID: { good: 100, poor: 300 },
  CLS: { good: 0.1, poor: 0.25 },
  FCP: { good: 1800, poor: 3000 },
  TTFB: { good: 600, poor: 1500 }
};
---

<!-- Google Tag Manager -->
{gtmId && (
  <script is:inline>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode?.insertBefore(j,f);
    })(window,document,'script','dataLayer','{gtmId}');
  </script>
)}

<!-- Global site tag (gtag.js) - Google Analytics -->
{gtagId && (
  <>
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${gtagId}`}></script>
    <script is:inline define:vars={{ gtagId, enableDebug }}>
      // Initialize Google Tag Manager
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      
      gtag('config', gtagId, {
        page_title: document.title,
        page_location: window.location.href,
        anonymize_ip: true,
        allow_google_signals: false,
        cookie_expires: 7776000, // 90 days
        debug_mode: enableDebug
      });
    </script>
  </>
)}

<!-- Advanced Analytics Framework -->
<script>
  // Analytics Framework Class
  class AdvancedAnalytics {
    events: any[];
    userSession: any;
    performanceMetrics: any;
    behaviorData: any;
    conversionData: any;
    debugMode: any;
    
    constructor() {
      this.events = [];
      this.userSession = this.initializeSession();
      this.performanceMetrics = {};
      this.behaviorData = {};
      this.conversionData = {};
      // Initialize debug mode
      this.debugMode = false; // Default to false if enableDebug is not available
      
      this.init();
    }
    
    init() {
      this.setupPerformanceTracking();
      this.setupUserBehaviorTracking();
      this.setupConversionTracking();
      this.setupErrorTracking();
      this.setupCustomEvents();
      
      // Initialize session tracking
      this.trackPageView();
      this.trackUserEngagement();
    }
    
    initializeSession() {
      const sessionId = this.generateSessionId();
      const userId = this.getUserId();
      const sessionStart = Date.now();
      
      return {
        sessionId,
        userId,
        sessionStart,
        pageViews: 0,
        events: 0,
        conversions: 0,
        timeOnSite: 0,
        pages: [],
        referrer: document.referrer || 'direct',
        userAgent: navigator.userAgent,
        viewport: {
          width: window.innerWidth,
          height: window.innerHeight
        },
        device: this.detectDevice(),
        location: this.detectLocation()
      };
    }
    
    generateSessionId() {
      return 'sess_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
    }
    
    getUserId() {
      let userId = localStorage.getItem('kps_user_id');
      if (!userId) {
        userId = 'user_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('kps_user_id', userId);
      }
      return userId;
    }
    
    detectDevice() {
      const width = window.innerWidth;
      if (width <= 768) return 'mobile';
      if (width <= 1024) return 'tablet';
      return 'desktop';
    }
    
    detectLocation() {
      // Simple location detection based on timezone and language
      return {
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        language: navigator.language,
        country: Intl.DateTimeFormat().resolvedOptions().locale
      };
    }
    
    // Performance Tracking
    setupPerformanceTracking() {
      // Default to enabled if enablePerformanceTracking is not available
      const performanceEnabled = true;
      if (!performanceEnabled) return;
      
      // Core Web Vitals
      this.trackCoreWebVitals();
      
      // Page Load Performance
      window.addEventListener('load', () => {
        setTimeout(() => {
          this.trackPageLoadMetrics();
        }, 0);
      });
      
      // Resource Performance
      this.trackResourcePerformance();
    }
    
    trackCoreWebVitals() {
      // LCP - Largest Contentful Paint
      new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1] as any;
        
        this.performanceMetrics.LCP = lastEntry.startTime;
        this.trackEvent('web_vitals', 'LCP', this.getVitalRating('LCP', lastEntry.startTime), {
          value: Math.round(lastEntry.startTime),
          element: lastEntry.element?.tagName || 'unknown'
        });
      }).observe({ entryTypes: ['largest-contentful-paint'] });
      
      // FID - First Input Delay
      new PerformanceObserver((list) => {
        const firstInput = list.getEntries()[0] as any;
        
        this.performanceMetrics.FID = firstInput.processingStart - firstInput.startTime;
        this.trackEvent('web_vitals', 'FID', this.getVitalRating('FID', this.performanceMetrics.FID), {
          value: Math.round(this.performanceMetrics.FID)
        });
      }).observe({ entryTypes: ['first-input'] });
      
      // CLS - Cumulative Layout Shift
      new PerformanceObserver((list) => {
        let clsValue = 0;
        for (const entry of list.getEntries()) {
          const layoutShiftEntry = entry as any;
          if (!layoutShiftEntry.hadRecentInput) {
            clsValue += layoutShiftEntry.value;
          }
        }
        
        this.performanceMetrics.CLS = clsValue;
        this.trackEvent('web_vitals', 'CLS', this.getVitalRating('CLS', clsValue), {
          value: Math.round(clsValue * 1000) / 1000
        });
      }).observe({ entryTypes: ['layout-shift'] });
    }
    
    getVitalRating(metric: string, value: number) {
      // Access the webVitalsThresholds from the component scope
      const thresholds = {
        LCP: { good: 2500, poor: 4000 },
        FID: { good: 100, poor: 300 },
        CLS: { good: 0.1, poor: 0.25 }
      };
      const threshold = thresholds[metric as keyof typeof thresholds];
      
      if (value <= threshold.good) return 'good';
      if (value <= threshold.poor) return 'needs_improvement';
      return 'poor';
    }
    
    trackPageLoadMetrics() {
      const navigation = performance.getEntriesByType('navigation')[0];
      
      const metrics = {
        TTFB: navigation.responseStart - navigation.requestStart,
        DOMContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
        LoadComplete: navigation.loadEventEnd - navigation.loadEventStart,
        FirstByte: navigation.responseStart - navigation.fetchStart,
        DNSLookup: navigation.domainLookupEnd - navigation.domainLookupStart,
        TCPConnect: navigation.connectEnd - navigation.connectStart
      };
      
      Object.entries(metrics).forEach(([metric, value]) => {
        this.performanceMetrics[metric] = value;
        this.trackEvent('page_performance', metric, Math.round(value), { value });
      });
    }
    
    trackResourcePerformance() {
      new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          const resourceEntry = entry as PerformanceResourceTiming;
          if (entry.duration > 1000) { // Track slow resources
            this.trackEvent('resource_performance', 'slow_resource', entry.name, {
              duration: Math.round(entry.duration),
              size: resourceEntry.transferSize || 0,
              type: resourceEntry.initiatorType
            });
          }
        }
      }).observe({ entryTypes: ['resource'] });
    }
    
    // User Behavior Tracking
    setupUserBehaviorTracking() {
      // Default to enabled if enableUserBehaviorTracking is not available
      const behaviorEnabled = true;
      if (!behaviorEnabled) return;
      
      this.trackScrollDepth();
      this.trackTimeOnPage();
      this.trackClickPatterns();
      this.trackFormInteractions();
      this.trackSearchBehavior();
    }
    
    trackScrollDepth() {
      let maxScroll = 0;
      const scrollDepthMarkers = [25, 50, 75, 90, 100];
      
      window.addEventListener('scroll', this.throttle(() => {
        const scrollPercent = Math.round(
          (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100
        );
        
        if (scrollPercent > maxScroll) {
          maxScroll = scrollPercent;
          
          scrollDepthMarkers.forEach(marker => {
            if (scrollPercent >= marker && !this.behaviorData[`scroll_${marker}`]) {
              this.behaviorData[`scroll_${marker}`] = true;
              this.trackEvent('user_engagement', 'scroll_depth', `${marker}%`, { 
                depth: marker,
                page: window.location.pathname
              });
            }
          });
        }
      }, 250));
    }
    
    trackTimeOnPage() {
      const startTime = Date.now();
      
      // Track time milestones
      const timeMarkers = [30, 60, 120, 300, 600]; // seconds
      
      timeMarkers.forEach(seconds => {
        setTimeout(() => {
          if (!document.hidden) {
            this.trackEvent('user_engagement', 'time_on_page', `${seconds}s`, {
              time: seconds,
              page: window.location.pathname
            });
          }
        }, seconds * 1000);
      });
      
      // Track when user leaves
      window.addEventListener('beforeunload', () => {
        const timeSpent = Math.round((Date.now() - startTime) / 1000);
        this.trackEvent('user_engagement', 'session_duration', timeSpent, {
          time: timeSpent,
          page: window.location.pathname
        });
      });
    }
    
    trackClickPatterns() {
      document.addEventListener('click', (e) => {
        const target = e.target as Element;
        if (!target) return;
        
        const element = target.closest('a, button, [data-cta]');
        if (!element) return;
        
        const trackingData = {
          element_type: element.tagName.toLowerCase(),
          element_text: element.textContent?.trim().substring(0, 50) || '',
          element_id: element.id || '',
          element_class: element.className || '',
          page: window.location.pathname,
          position: {
            x: e.clientX,
            y: e.clientY
          }
        };
        
        // Special tracking for CTAs
        const htmlElement = element as HTMLElement;
        if (htmlElement.dataset.track === 'cta') {
          this.trackEvent('conversion', 'cta_click', htmlElement.dataset.trackLabel || 'unknown', trackingData);
        } else if (element.tagName === 'A') {
          const linkElement = element as HTMLAnchorElement;
          this.trackEvent('navigation', 'link_click', linkElement.href, trackingData);
        } else {
          this.trackEvent('interaction', 'click', element.textContent?.trim() || 'button', trackingData);
        }
      });
    }
    
    trackFormInteractions() {
      document.querySelectorAll('form').forEach(form => {
        const formName = form.name || form.id || 'unnamed_form';
        
        // Track form start
        form.addEventListener('focusin', () => {
          if (!this.behaviorData[`form_start_${formName}`]) {
            this.behaviorData[`form_start_${formName}`] = true;
            this.trackEvent('form_interaction', 'form_start', formName);
          }
        }, { once: true });
        
        // Track form submission
        form.addEventListener('submit', (e) => {
          this.trackEvent('conversion', 'form_submit', formName, {
            form_name: formName,
            page: window.location.pathname
          });
        });
        
        // Track form abandonment
        form.addEventListener('focusout', () => {
          setTimeout(() => {
            if (!form.contains(document.activeElement)) {
              this.trackEvent('form_interaction', 'form_abandon', formName);
            }
          }, 100);
        });
      });
    }
    
    trackSearchBehavior() {
      const searchInputs = document.querySelectorAll('input[type="search"], [data-search]');
      
      searchInputs.forEach(input => {
        let searchStartTime: number;
        
        input.addEventListener('focus', () => {
          searchStartTime = Date.now();
          this.trackEvent('search', 'search_start', 'focus');
        });
        
        input.addEventListener('input', this.debounce(() => {
          const searchInput = input as HTMLInputElement;
          if (searchInput.value.length >= 3) {
            this.trackEvent('search', 'search_query', searchInput.value.substring(0, 100), {
              query_length: searchInput.value.length,
              time_to_type: searchStartTime ? Date.now() - searchStartTime : 0
            });
          }
        }, 500));
      });
    }
    
    // Conversion Tracking
    setupConversionTracking() {
      if (!(enableConversionTracking as boolean)) return;
      
      this.trackPhoneClicks();
      this.trackEmailClicks();
      this.trackDownloads();
      this.trackOutboundLinks();
    }
    
    trackPhoneClicks() {
      document.querySelectorAll('a[href^="tel:"]').forEach(link => {
        link.addEventListener('click', () => {
          const phoneNumber = (link as HTMLAnchorElement).href.replace('tel:', '');
          this.trackEvent('conversion', 'phone_click', phoneNumber, {
            phone_number: phoneNumber,
            page: window.location.pathname
          });
        });
      });
    }
    
    trackEmailClicks() {
      document.querySelectorAll('a[href^="mailto:"]').forEach(link => {
        link.addEventListener('click', () => {
          const email = (link as HTMLAnchorElement).href.replace('mailto:', '');
          this.trackEvent('conversion', 'email_click', email, {
            email: email,
            page: window.location.pathname
          });
        });
      });
    }
    
    trackDownloads() {
      document.querySelectorAll('a[href$=".pdf"], a[href$=".doc"], a[href$=".docx"], a[href$=".xls"], a[href$=".xlsx"]').forEach(link => {
        link.addEventListener('click', () => {
          const fileName = (link as HTMLAnchorElement).href.split('/').pop();
          this.trackEvent('conversion', 'download', fileName || 'unknown', {
            file_name: fileName,
            file_type: fileName?.split('.').pop(),
            page: window.location.pathname
          });
        });
      });
    }
    
    trackOutboundLinks() {
      document.querySelectorAll('a[href^="http"]').forEach(link => {
        const anchorLink = link as HTMLAnchorElement;
        if (!anchorLink.href.includes(window.location.hostname)) {
          link.addEventListener('click', () => {
            this.trackEvent('navigation', 'outbound_click', anchorLink.href, {
              destination: anchorLink.href,
              page: window.location.pathname
            });
          });
        }
      });
    }
    
    // Error Tracking
    setupErrorTracking() {
      window.addEventListener('error', (e) => {
        this.trackEvent('error', 'javascript_error', e.message, {
          error_message: e.message,
          error_file: e.filename,
          error_line: e.lineno,
          error_column: e.colno,
          stack: e.error?.stack?.substring(0, 500) || 'No stack trace',
          page: window.location.pathname
        });
      });
      
      window.addEventListener('unhandledrejection', (e) => {
        this.trackEvent('error', 'promise_rejection', e.reason, {
          reason: String(e.reason).substring(0, 500),
          page: window.location.pathname
        });
      });
    }
    
    // Custom Events
    setupCustomEvents() {
      const customEvents = {customEvents};
      customEvents.forEach(event => {
        this.trackEvent(event.category, event.action, event.label, {
          ...event.customParameters,
          custom_event: true
        });
      });
    }
    
    // Core tracking functions
    trackEvent(category: string, action: string, label: string | number, parameters = {}) {
      const eventData = {
        event_category: category,
        event_action: action,
        event_label: label,
        ...parameters,
        timestamp: Date.now(),
        session_id: this.userSession.sessionId,
        user_id: this.userSession.userId,
        page_path: window.location.pathname,
        page_title: document.title
      };
      
      // Send to Google Analytics
      if (typeof gtag === 'function') {
        gtag('event', action, {
          event_category: category,
          event_label: label,
          ...parameters
        });
      }
      
      // Send to Google Tag Manager
      if (typeof (window as any).dataLayer !== 'undefined') {
        (window as any).dataLayer.push({
          event: 'custom_event',
          ...eventData
        });
      }
      
      // Store for debugging
      if (this.debugMode) {
        console.log('Analytics Event:', eventData);
      }
      
      this.events.push(eventData);
      this.userSession.events++;
    }
    
    trackPageView() {
      this.userSession.pageViews++;
      this.userSession.pages.push({
        path: window.location.pathname,
        title: document.title,
        timestamp: Date.now()
      });
      
      this.trackEvent('navigation', 'page_view', window.location.pathname, {
        page_title: document.title,
        referrer: document.referrer || 'direct'
      });
    }
    
    trackUserEngagement() {
      // Track user engagement score based on various factors
      setInterval(() => {
        const engagementScore = this.calculateEngagementScore();
        this.trackEvent('user_engagement', 'engagement_score', engagementScore, {
          score: engagementScore,
          session_duration: Date.now() - this.userSession.sessionStart,
          page_views: this.userSession.pageViews,
          events: this.userSession.events
        });
      }, 30000); // Every 30 seconds
    }
    
    calculateEngagementScore() {
      const sessionDuration = (Date.now() - this.userSession.sessionStart) / 1000;
      const scrollDepth = Object.keys(this.behaviorData).filter(key => key.startsWith('scroll_')).length;
      
      let score = 0;
      score += Math.min(sessionDuration / 60, 10); // Up to 10 points for time
      score += this.userSession.pageViews * 2; // 2 points per page view
      score += this.userSession.events * 0.5; // 0.5 points per event
      score += scrollDepth * 2; // 2 points per scroll milestone
      
      return Math.round(score);
    }
    
    // Utility functions
    throttle(func: Function, delay: number) {
      let timeoutId: any;
      let lastExecTime = 0;
      return function (this: any, ...args: any[]) {
        const currentTime = Date.now();
        
        if (currentTime - lastExecTime > delay) {
          func.apply(this, args);
          lastExecTime = currentTime;
        } else {
          clearTimeout(timeoutId);
          timeoutId = setTimeout(() => {
            func.apply(this, args);
            lastExecTime = Date.now();
          }, delay - (currentTime - lastExecTime));
        }
      };
    }

    debounce(func: Function, delay: number) {
      let timeoutId: any;
      return function (this: any, ...args: any[]) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
      };
    }
  }
  
  // Initialize Advanced Analytics
  window.addEventListener('DOMContentLoaded', () => {
    (window as any).advancedAnalytics = new AdvancedAnalytics();
  });
</script>

<!-- Cookie Consent Banner -->
{enableCookieConsent && (
  <div id="cookie-consent" class="fixed bottom-0 left-0 right-0 bg-gray-900 text-white p-4 shadow-lg z-50 transform translate-y-full transition-transform duration-300" style="display: none;">
    <div class="max-w-7xl mx-auto flex flex-col sm:flex-row items-center justify-between gap-4">
      <div class="flex-1">
        <p class="text-sm">
          We use cookies to enhance your experience and analyze site usage. 
          <a href="/privacy-policy" class="text-blue-300 hover:text-blue-200 underline">Learn more</a>
        </p>
      </div>
      <div class="flex gap-3">
        <button 
          id="cookie-accept"
          class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-sm font-medium transition-colors"
        >
          Accept All
        </button>
        <button 
          id="cookie-essential"
          class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-sm font-medium transition-colors"
        >
          Essential Only
        </button>
      </div>
    </div>
  </div>

  <script>
    // Cookie Consent Management
    (function() {
      const consentBanner = document.getElementById('cookie-consent');
      const acceptBtn = document.getElementById('cookie-accept');
      const essentialBtn = document.getElementById('cookie-essential');
      
      // Check if consent already given
      const consent = localStorage.getItem('cookie_consent');
      if (!consent && consentBanner) {
        setTimeout(() => {
          consentBanner.style.display = 'block';
          consentBanner.classList.remove('translate-y-full');
        }, 2000);
      }
      
      // Accept all cookies
      acceptBtn?.addEventListener('click', () => {
        localStorage.setItem('cookie_consent', 'all');
        hideConsentBanner();
        enableAllTracking();
      });
      
      // Essential cookies only
      essentialBtn?.addEventListener('click', () => {
        localStorage.setItem('cookie_consent', 'essential');
        hideConsentBanner();
        enableEssentialTracking();
      });
      
      function hideConsentBanner() {
        if (consentBanner) {
          consentBanner.classList.add('translate-y-full');
          setTimeout(() => {
            consentBanner.style.display = 'none';
          }, 300);
        }
      }
      
      function enableAllTracking() {
        // Enable all analytics
        if (typeof gtag === 'function') {
          gtag('consent', 'update', {
            analytics_storage: 'granted',
            ad_storage: 'granted'
          });
        }
      }
      
      function enableEssentialTracking() {
        // Only essential tracking
        if (typeof gtag === 'function') {
          gtag('consent', 'update', {
            analytics_storage: 'denied',
            ad_storage: 'denied'
          });
        }
      }
    })();
  </script>
)}

<!-- Google Tag Manager (noscript) -->
{gtmId && (
  <noscript>
    <iframe 
      src={`https://www.googletagmanager.com/ns.html?id=${gtmId}`}
      height="0" 
      width="0" 
      style="display:none;visibility:hidden"
    ></iframe>
  </noscript>
)}

<style>
  #cookie-consent {
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }
</style>
