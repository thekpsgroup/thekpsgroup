---
// Simple live chat widget for immediate engagement
// This is a basic implementation - can be replaced with Intercom, Drift, etc.

export interface Props {
  position?: 'bottom-right' | 'bottom-left';
  theme?: 'dark' | 'light';
  showOnMobile?: boolean;
}

const {
  position = 'bottom-right',
  theme = 'dark',
  showOnMobile = true
} = Astro.props;

const positionClasses = {
  'bottom-right': 'bottom-4 right-4',
  'bottom-left': 'bottom-4 left-4'
};

const themeClasses = {
  dark: {
    button: 'bg-warning-400 hover:bg-warning-300 text-black',
    chat: 'bg-gray-900 border-gray-700',
    text: 'text-white'
  },
  light: {
    button: 'bg-blue-600 hover:bg-blue-500 text-white',
    chat: 'bg-white border-gray-200',
    text: 'text-gray-900'
  }
};

const styles = themeClasses[theme];
---

<!-- Live Chat Widget -->
<div 
  id="live-chat-widget" 
  class={`fixed ${positionClasses[position]} z-50 ${showOnMobile ? '' : 'hidden sm:block'}`}
>
  <!-- Chat Button -->
  <button
    id="chat-toggle"
    class={`${styles.button} w-14 h-14 rounded-full shadow-lg flex items-center justify-center transition-all duration-300 hover:scale-110 focus:ring-4 focus:ring-warning-400/20`}
    aria-label="Open live chat"
  >
    <svg id="chat-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
    </svg>
    <svg id="close-icon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
    </svg>
  </button>

  <!-- Chat Popup -->
  <div
    id="chat-popup"
    class={`absolute bottom-16 ${position === 'bottom-right' ? 'right-0' : 'left-0'} w-80 h-96 ${styles.chat} border rounded-2xl shadow-2xl transform scale-0 transition-all duration-300 origin-bottom-right`}
  >
    <!-- Chat Header -->
    <div class="bg-warning-400 text-black p-4 rounded-t-2xl">
      <div class="flex items-center gap-3">
        <div class="w-10 h-10 bg-black rounded-full flex items-center justify-center">
          <span class="text-warning-400 font-bold text-sm">KPS</span>
        </div>
        <div>
          <h3 class="font-semibold">The KPS Group</h3>
          <p class="text-xs opacity-90">Typically replies instantly</p>
        </div>
        <div class="ml-auto">
          <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
        </div>
      </div>
    </div>

    <!-- Chat Messages -->
    <div id="chat-messages" class={`flex-1 p-4 space-y-3 overflow-y-auto h-64 ${styles.text}`}>
      <!-- Initial Message -->
      <div class="flex items-start gap-2">
        <div class="w-8 h-8 bg-warning-400 rounded-full flex items-center justify-center flex-shrink-0">
          <span class="text-black font-bold text-xs">K</span>
        </div>
        <div class="bg-gray-100 text-gray-900 p-3 rounded-lg max-w-xs">
          <p class="text-sm">Hi! ðŸ‘‹ I'm here to help you transform your business. What can I assist you with today?</p>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="p-4 border-t border-gray-200">
      <div class="space-y-2">
        <button class="w-full text-left text-sm p-2 hover:bg-gray-100 rounded transition-colors quick-action" data-action="consultation">
          ðŸ’¼ Schedule free consultation
        </button>
        <button class="w-full text-left text-sm p-2 hover:bg-gray-100 rounded transition-colors quick-action" data-action="services">
          ðŸ“‹ Learn about our services
        </button>
        <button class="w-full text-left text-sm p-2 hover:bg-gray-100 rounded transition-colors quick-action" data-action="pricing">
          ðŸ’° Get pricing information
        </button>
        <button class="w-full text-left text-sm p-2 hover:bg-gray-100 rounded transition-colors quick-action" data-action="call">
          ðŸ“ž Request a callback
        </button>
      </div>
    </div>

    <!-- Contact Form (Hidden Initially) -->
    <div id="chat-contact-form" class="hidden p-4 border-t border-gray-200">
      <form id="quick-contact-form" class="space-y-3">
        <input
          type="text"
          name="name"
          placeholder="Your name"
          required
          class="w-full p-2 border border-gray-300 rounded text-sm"
        />
        <input
          type="email"
          name="email"
          placeholder="Your email"
          required
          class="w-full p-2 border border-gray-300 rounded text-sm"
        />
        <input
          type="tel"
          name="phone"
          placeholder="Phone (optional)"
          class="w-full p-2 border border-gray-300 rounded text-sm"
        />
        <button
          type="submit"
          class="w-full bg-warning-400 hover:bg-warning-300 text-black font-semibold py-2 px-4 rounded transition-colors"
        >
          Send Message
        </button>
      </form>
    </div>
  </div>

  <!-- Notification Dot -->
  <div id="chat-notification" class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center animate-pulse">
    <span class="text-white text-xs font-bold">1</span>
  </div>
</div>

<script>
  // Live Chat Functionality
  document.addEventListener('DOMContentLoaded', function() {
    const chatToggle = document.getElementById('chat-toggle');
    const chatPopup = document.getElementById('chat-popup');
    const chatIcon = document.getElementById('chat-icon');
    const closeIcon = document.getElementById('close-icon');
    const chatNotification = document.getElementById('chat-notification');
    const chatMessages = document.getElementById('chat-messages');
    const quickActions = document.querySelectorAll('.quick-action');
    const contactForm = document.getElementById('chat-contact-form');
    const quickContactForm = document.getElementById('quick-contact-form');

    let isOpen = false;

    // Toggle chat
    if (chatToggle) {
      chatToggle.addEventListener('click', function() {
        isOpen = !isOpen;
        
        if (isOpen) {
          if (chatPopup) {
            chatPopup.classList.remove('scale-0');
            chatPopup.classList.add('scale-100');
          }
          if (chatIcon) chatIcon.classList.add('hidden');
          if (closeIcon) closeIcon.classList.remove('hidden');
          if (chatNotification) chatNotification.classList.add('hidden');
          
          // Track chat open
          if (typeof window.gtag !== 'undefined') {
            window.gtag('event', 'chat_opened', {
              event_category: 'Chat',
              event_label: 'Live Chat Widget'
            });
          }
        } else {
          if (chatPopup) {
            chatPopup.classList.remove('scale-100');
            chatPopup.classList.add('scale-0');
          }
          if (chatIcon) chatIcon.classList.remove('hidden');
          if (closeIcon) closeIcon.classList.add('hidden');
        }
      });
    }

    // Quick actions
    quickActions.forEach(function(action) {
      action.addEventListener('click', function(e) {
        const actionType = e.target.dataset.action;
        
        // Track action click
        if (typeof window.gtag !== 'undefined') {
          window.gtag('event', 'chat_action_click', {
            event_category: 'Chat',
            event_label: actionType
          });
        }

        switch (actionType) {
          case 'consultation':
            window.location.href = '/contact';
            break;
          case 'services':
            window.location.href = '/services';
            break;
          case 'pricing':
            showContactForm('I would like to get pricing information');
            break;
          case 'call':
            showContactForm('Please call me back');
            break;
        }
      });
    });

    // Show contact form
    function showContactForm(message) {
      const quickActionsContainer = document.querySelector('.space-y-2');
      if (quickActionsContainer) quickActionsContainer.classList.add('hidden');
      if (contactForm) contactForm.classList.remove('hidden');
      
      // Add message to chat
      if (message) {
        addMessage(message, 'user');
        addMessage('Perfect! Please fill out this quick form and we\'ll get back to you right away.', 'bot');
      }
    }

    // Add message to chat
    function addMessage(text, sender) {
      if (!chatMessages) return;
      
      const messageDiv = document.createElement('div');
      messageDiv.className = 'flex items-start gap-2';
      
      // SECURITY FIX: Use textContent instead of innerHTML to prevent XSS
      if (sender === 'user') {
        const userMessageContainer = document.createElement('div');
        userMessageContainer.className = 'ml-auto bg-warning-400 text-black p-3 rounded-lg max-w-xs';
        const userMessageText = document.createElement('p');
        userMessageText.className = 'text-sm';
        userMessageText.textContent = text; // Safe - no HTML injection possible
        userMessageContainer.appendChild(userMessageText);
        messageDiv.appendChild(userMessageContainer);
      } else {
        const avatarDiv = document.createElement('div');
        avatarDiv.className = 'w-8 h-8 bg-warning-400 rounded-full flex items-center justify-center flex-shrink-0';
        const avatarSpan = document.createElement('span');
        avatarSpan.className = 'text-black font-bold text-xs';
        avatarSpan.textContent = 'K';
        avatarDiv.appendChild(avatarSpan);
        
        const botMessageContainer = document.createElement('div');
        botMessageContainer.className = 'bg-gray-100 text-gray-900 p-3 rounded-lg max-w-xs';
        const botMessageText = document.createElement('p');
        botMessageText.className = 'text-sm';
        botMessageText.textContent = text; // Safe - no HTML injection possible
        botMessageContainer.appendChild(botMessageText);
        
        messageDiv.appendChild(avatarDiv);
        messageDiv.appendChild(botMessageContainer);
      }
      
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Handle contact form submission
    if (quickContactForm) {
      quickContactForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(quickContactForm);
        formData.append('message', 'Contact request from live chat widget');
        formData.append('formType', 'live-chat');
        
        try {
          const response = await fetch('/api/contact', {
            method: 'POST',
            body: formData
          });
          
          if (response.ok) {
            addMessage('Thank you! We\'ve received your information and will contact you within 1 hour.', 'bot');
            quickContactForm.reset();
            if (contactForm) contactForm.classList.add('hidden');
            
            // Track successful submission
            if (typeof window.gtag !== 'undefined') {
              window.gtag('event', 'chat_form_submit', {
                event_category: 'Chat',
                event_label: 'Live Chat Contact Form'
              });
            }
          } else {
            addMessage('Sorry, there was an error. Please try again or call us at 469-458-6966.', 'bot');
          }
        } catch (error) {
          addMessage('Sorry, there was an error. Please try again or call us at 469-458-6966.', 'bot');
        }
      });
    }

    // Show notification after delay
    setTimeout(function() {
      if (!isOpen && chatNotification) {
        chatNotification.classList.remove('hidden');
      }
    }, 30000); // Show after 30 seconds

    // Auto-hide notification after interaction
    document.addEventListener('scroll', function() {
      if (chatNotification) chatNotification.classList.add('hidden');
    }, { once: true });
  });
</script>

<style>
  /* Chat widget animations */
  #chat-popup {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  /* Smooth transitions */
  .quick-action {
    transition: all 0.2s ease;
  }

  .quick-action:hover {
    transform: translateX(4px);
  }

  /* Mobile responsive */
  @media (max-width: 640px) {
    #chat-popup {
      width: calc(100vw - 2rem);
      right: 1rem !important;
      left: 1rem !important;
    }
  }

  /* Notification animation */
  @keyframes bounce {
    0%, 20%, 53%, 80%, 100% {
      transform: translate3d(0,0,0);
    }
    40%, 43% {
      transform: translate3d(0,-30px,0);
    }
    70% {
      transform: translate3d(0,-15px,0);
    }
    90% {
      transform: translate3d(0,-4px,0);
    }
  }

  #chat-notification {
    animation: bounce 2s infinite;
  }
</style>
