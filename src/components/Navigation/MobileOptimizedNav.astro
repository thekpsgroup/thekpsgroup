---
interface NavItem {
  name: string;
  href: string;
  children?: NavItem[];
  icon?: string;
  badge?: string;
}

interface Props {
  currentPath?: string;
  transparent?: boolean;
  sticky?: boolean;
}

const {
  currentPath = '',
  transparent = false,
  sticky = true
} = Astro.props;

import { CONTACT } from "../../constants/contact";

const navigation: NavItem[] = [
  {
    name: 'Services',
    href: '/services',
    icon: '🎯',
    children: [
      { name: 'QuickBooks Setup', href: '/services/quickbooks-setup', icon: '📊' },
      { name: 'Payroll Services', href: '/services/payroll-services', icon: '💰' },
      { name: 'Business Consulting', href: '/services/business-consulting', icon: '🚀' },
      { name: 'HR Solutions', href: '/services/hr-solutions', icon: '👥' },
      { name: 'Technology Consulting', href: '/services/technology-consulting', icon: '💻' },
      { name: 'Digital Marketing', href: '/services/digital-marketing', icon: '📱' }
    ]
  },
  {
    name: 'Locations',
    href: '/locations',
    icon: '📍',
    children: [
      { name: 'Dallas, TX', href: '/locations/dallas', icon: '🏢' },
      { name: 'Houston, TX', href: '/locations/houston', icon: '🏢' },
      { name: 'Austin, TX', href: '/locations/austin', icon: '🏢' },
      { name: 'Oklahoma City, OK', href: '/locations/oklahoma-city', icon: '🏢' },
      { name: 'Tulsa, OK', href: '/locations/tulsa', icon: '🏢' },
      { name: 'View All Locations', href: '/locations', icon: '🗺️' }
    ]
  },
  {
    name: 'About',
    href: '/about',
    icon: '🏆'
  },
  {
    name: 'Resources',
    href: '/resources',
    icon: '📚',
    children: [
      { name: 'Blog', href: '/blog', icon: '📝' },
      { name: 'Case Studies', href: '/case-studies', icon: '📈' },
      { name: 'Downloads', href: '/downloads', icon: '⬇️' },
      { name: 'FAQs', href: '/faq', icon: '❓' }
    ]
  },
  {
    name: 'Contact',
    href: '/contact',
    icon: '📞',
    badge: 'Free Quote'
  }
];

// Check if current path matches navigation item
const isActive = (href: string) => {
  if (href === '/' && currentPath === '/') return true;
  if (href !== '/' && currentPath.startsWith(href)) return true;
  return false;
};

const hasActiveChild = (children?: NavItem[]) => {
  if (!children) return false;
  return children.some(child => isActive(child.href));
};
---

<nav class={`mobile-nav ${sticky ? 'sticky top-0' : ''} z-50 transition-all duration-300 ${transparent ? 'bg-transparent' : 'bg-white shadow-lg'}`}>
  <!-- Main Navigation Bar -->
  <div class="max-w-7xl mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo with Enhanced Accessibility -->
      <div class="flex-shrink-0">
        <a 
          href="/" 
          class="flex items-center space-x-2 group focus:outline-none focus:ring-2 focus:ring-gold focus:ring-offset-2 rounded-lg p-1"
          aria-label="The KPS Group - Return to homepage"
        >
          <div class="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center transition-all duration-300 group-hover:scale-110 group-focus:scale-110">
            <span class="text-white font-bold text-lg" aria-hidden="true">K</span>
          </div>
          <div class="hidden sm:block">
            <div class={`text-xl font-bold transition-colors duration-200 ${transparent ? 'text-white' : 'text-gray-900'}`}>
              The KPS Group
            </div>
            <div class={`text-xs transition-colors duration-200 ${transparent ? 'text-gray-200' : 'text-gray-500'}`}>
              Business Solutions
            </div>
          </div>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden lg:flex items-center space-x-8">
        {navigation.map(item => (
          <div class="relative group">
            <a 
              href={item.href}
              class={`nav-link flex items-center space-x-1 px-3 py-2 rounded-lg font-medium transition-all duration-200 ${
                isActive(item.href) || hasActiveChild(item.children)
                  ? transparent 
                    ? 'bg-white/20 text-white' 
                    : 'bg-blue-50 text-blue-600'
                  : transparent
                    ? 'text-white hover:bg-white/10'
                    : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              {item.icon && <span class="text-sm">{item.icon}</span>}
              <span>{item.name}</span>
              {item.badge && (
                <span class="ml-2 px-2 py-1 bg-gradient-to-r from-yellow-400 to-orange-500 text-black text-xs font-bold rounded-full">
                  {item.badge}
                </span>
              )}
              {item.children && (
                <svg class="w-4 h-4 ml-1 transition-transform group-hover:rotate-180" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              )}
            </a>
            
            {/* Dropdown Menu */}
            {item.children && (
              <div class="dropdown-menu absolute top-full left-0 mt-2 w-64 bg-white rounded-xl shadow-xl border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform translate-y-2 group-hover:translate-y-0">
                <div class="p-2">
                  {item.children.map(child => (
                    <a 
                      href={child.href}
                      class={`dropdown-item flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200 ${
                        isActive(child.href)
                          ? 'bg-blue-50 text-blue-600'
                          : 'text-gray-700 hover:bg-gray-50'
                      }`}
                    >
                      {child.icon && <span class="text-lg">{child.icon}</span>}
                      <span class="font-medium">{child.name}</span>
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      <!-- Contact Info & CTA -->
      <div class="hidden lg:flex items-center space-x-4">
        <a 
          href={CONTACT.phoneHref}
          class={`flex items-center space-x-2 ${transparent ? 'text-white hover:text-gray-200' : 'text-gray-600 hover:text-gray-900'} transition-colors`}
        >
          <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
          </svg>
          <span class="font-medium">469-458-6966</span>
        </a>
        
        <a 
          href="/contact"
          class="inline-flex items-center px-6 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
        >
          Get Quote
          <svg class="w-4 h-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      </div>

      <!-- Mobile Menu Button -->
      <div class="lg:hidden">
        <button 
          id="mobile-menu-button"
          class={`mobile-menu-toggle p-2 rounded-lg transition-all duration-200 ${
            transparent 
              ? 'text-white hover:bg-white/10' 
              : 'text-gray-700 hover:bg-gray-100'
          }`}
          aria-label="Toggle mobile menu"
        >
          <svg class="menu-icon w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <svg class="close-icon w-6 h-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Menu Overlay -->
  <div id="mobile-menu-overlay" class="mobile-overlay fixed inset-0 bg-black bg-opacity-50 opacity-0 invisible transition-all duration-300 lg:hidden"></div>

  <!-- Mobile Menu Panel -->
  <div id="mobile-menu-panel" class="mobile-panel fixed top-0 right-0 h-full w-80 max-w-sm bg-white shadow-2xl transform translate-x-full transition-transform duration-300 lg:hidden overflow-y-auto">
    <!-- Mobile Menu Header -->
    <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6">
      <div class="flex items-center justify-between">
        <div>
          <div class="text-xl font-bold">The KPS Group</div>
          <div class="text-blue-100 text-sm">Business Solutions</div>
        </div>
        <button 
          id="mobile-menu-close"
          class="p-2 rounded-lg hover:bg-white/10 transition-colors"
          aria-label="Close mobile menu"
        >
          <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Menu Content -->
    <div class="p-6">
      <!-- Quick Contact -->
      <div class="mb-8 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl">
        <div class="text-center">
          <div class="text-lg font-bold text-gray-900 mb-2">Need Help Now?</div>
          <a 
            href={CONTACT.phoneHref}
            class="inline-flex items-center justify-center w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 mb-3"
          >
            <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
            </svg>
            Call 469-458-6966
          </a>
          <a 
            href="/contact"
            class="inline-flex items-center justify-center w-full px-4 py-2 border-2 border-blue-600 text-blue-600 font-semibold rounded-lg hover:bg-blue-50 transition-colors"
          >
            Get Free Quote
          </a>
        </div>
      </div>

      <!-- Navigation Items -->
      <nav class="space-y-2">
        {navigation.map(item => (
          <div class="mobile-nav-item">
            <div class="flex items-center justify-between">
              <a 
                href={item.href}
                class={`flex items-center space-x-3 flex-1 px-4 py-3 rounded-lg font-medium transition-all duration-200 ${
                  isActive(item.href) || hasActiveChild(item.children)
                    ? 'bg-blue-50 text-blue-600'
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
              >
                {item.icon && <span class="text-lg">{item.icon}</span>}
                <span>{item.name}</span>
                {item.badge && (
                  <span class="ml-auto px-2 py-1 bg-gradient-to-r from-yellow-400 to-orange-500 text-black text-xs font-bold rounded-full">
                    {item.badge}
                  </span>
                )}
              </a>
              {item.children && (
                <button 
                  class="mobile-submenu-toggle p-2 text-gray-400 hover:text-gray-600 transition-colors"
                  data-target={`submenu-${item.name.toLowerCase()}`}
                  aria-label={`Toggle ${item.name} submenu`}
                >
                  <svg class="w-5 h-5 transform transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
              )}
            </div>
            
            {/* Mobile Submenu */}
            {item.children && (
              <div 
                id={`submenu-${item.name.toLowerCase()}`}
                class="mobile-submenu hidden pl-4 mt-2 space-y-1"
              >
                {item.children.map(child => (
                  <a 
                    href={child.href}
                    class={`flex items-center space-x-3 px-4 py-2 rounded-lg transition-all duration-200 ${
                      isActive(child.href)
                        ? 'bg-blue-50 text-blue-600'
                        : 'text-gray-600 hover:bg-gray-50'
                    }`}
                  >
                    {child.icon && <span>{child.icon}</span>}
                    <span>{child.name}</span>
                  </a>
                ))}
              </div>
            )}
          </div>
        ))}
      </nav>
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
    const mobileMenuPanel = document.getElementById('mobile-menu-panel');
    const mobileMenuClose = document.getElementById('mobile-menu-close');
    const submenuToggles = document.querySelectorAll('.mobile-submenu-toggle');
    const nav = document.querySelector('.mobile-nav');
    
    let isMenuOpen = false;

    // Toggle mobile menu
    function toggleMobileMenu() {
      isMenuOpen = !isMenuOpen;
      
      if (isMenuOpen) {
        // Open menu
        mobileMenuOverlay?.classList.remove('opacity-0', 'invisible');
        mobileMenuOverlay?.classList.add('opacity-100', 'visible');
        mobileMenuPanel?.classList.remove('translate-x-full');
        mobileMenuPanel?.classList.add('translate-x-0');
        document.body.style.overflow = 'hidden';
        
        // Update button icon
        const menuIcon = mobileMenuButton?.querySelector('.menu-icon');
        const closeIcon = mobileMenuButton?.querySelector('.close-icon');
        menuIcon?.classList.add('hidden');
        closeIcon?.classList.remove('hidden');
      } else {
        // Close menu
        mobileMenuOverlay?.classList.add('opacity-0', 'invisible');
        mobileMenuOverlay?.classList.remove('opacity-100', 'visible');
        mobileMenuPanel?.classList.add('translate-x-full');
        mobileMenuPanel?.classList.remove('translate-x-0');
        document.body.style.overflow = '';
        
        // Update button icon
        const menuIcon = mobileMenuButton?.querySelector('.menu-icon');
        const closeIcon = mobileMenuButton?.querySelector('.close-icon');
        menuIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
      }
    }

    // Event listeners
    mobileMenuButton?.addEventListener('click', toggleMobileMenu);
    mobileMenuClose?.addEventListener('click', toggleMobileMenu);
    mobileMenuOverlay?.addEventListener('click', toggleMobileMenu);

    // Submenu toggles
    submenuToggles.forEach(toggle => {
      toggle.addEventListener('click', (event) => {
        const target = event.currentTarget as HTMLElement;
        const targetId = target.getAttribute('data-target');
        if (!targetId) return;
        
        const submenu = document.getElementById(targetId);
        const icon = target.querySelector('svg');
        
        if (submenu && icon) {
          if (submenu.classList.contains('hidden')) {
            submenu.classList.remove('hidden');
            icon.style.transform = 'rotate(180deg)';
          } else {
            submenu.classList.add('hidden');
            icon.style.transform = 'rotate(0deg)';
          }
        }
      });
    });

    // Handle scroll for navigation transparency
    let lastScrollY = window.scrollY;
    
    function handleScroll() {
      const currentScrollY = window.scrollY;
      
      if (nav && !nav.classList.contains('bg-transparent')) {
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
          // Scrolling down
          (nav as HTMLElement).style.transform = 'translateY(-100%)';
        } else {
          // Scrolling up
          (nav as HTMLElement).style.transform = 'translateY(0)';
        }
      }
      
      lastScrollY = currentScrollY;
    }

    // Throttled scroll handler
    let ticking = false;
    window.addEventListener('scroll', () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    });

    // Close mobile menu on window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 1024 && isMenuOpen) {
        toggleMobileMenu();
      }
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        toggleMobileMenu();
      }
    });
  });
</script>

<style>
  .mobile-nav {
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }
  
  .dropdown-menu {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  .mobile-panel {
    box-shadow: -10px 0 25px -5px rgba(0, 0, 0, 0.1);
  }
  
  .nav-link:hover {
    transform: translateY(-1px);
  }
  
  .dropdown-item:hover {
    transform: translateX(4px);
  }
  
  /* Smooth transitions */
  .mobile-nav,
  .dropdown-menu,
  .mobile-submenu,
  .nav-link,
  .dropdown-item {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Focus states for accessibility */
  .nav-link:focus,
  .dropdown-item:focus,
  .mobile-menu-toggle:focus {
    outline: 2px solid #3B82F6;
    outline-offset: 2px;
  }
  
  /* Mobile menu animations */
  @media (max-width: 1023px) {
    .mobile-overlay {
      backdrop-filter: blur(4px);
      -webkit-backdrop-filter: blur(4px);
    }
  }
</style>
